/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 cat.glb --transform 
Files: cat.glb [13.01MB] > C:\code\personal-portfolio\public\cat\cat-transformed.glb [6.71MB] (48%)
*/

import React, { useEffect, useState } from "react";
import { useFrame, useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import * as THREE from "three";
import { useStore } from "../utils/store";
import { log } from "three/examples/jsm/nodes/Nodes.js";

export function Cat(props) {
  const cat = React.useRef();
  const { scene, animations } = useGLTF("/cat/cat-transformed.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { actions, mixer } = useAnimations(animations, cat);
  const cameraHeight = useStore((state) => state.cameraHeight);
  const [activateAnimation, setActivateAnimation] = useState(false);
  const [showCat, setShowCat] = useState(true);
  const [showCatCount, setShowCatCount] = useState(1);
  const [currentAnimation, SetCurrentAnimation] = useState(
    "Cat licking 1-143_GRT_"
  );

  useEffect(() => {
    if (currentAnimation === "Cat licking 1-143_GRT_") {
      actions[currentAnimation].clampWhenFinished = true;
      actions?.[currentAnimation].setLoop(THREE.LoopOnce);
    }

    if (activateAnimation === true) {
      actions?.[currentAnimation].reset().fadeIn(0.5).play();
    }

    return () => {
      actions[currentAnimation]?.fadeOut(1);
    };
  }, [actions, currentAnimation, activateAnimation]);

  mixer.addEventListener("finished", () => {
    SetCurrentAnimation("Cat_Walk 1_32_GRT_");
  });

  useFrame(() => {
    if (
      currentAnimation === "Cat_Walk 1_32_GRT_" &&
      cat.current.position.z > -19
    ) {
      cat.current.position.z = cat.current.position.z - 0.02;
    } else if (cat.current.position.z < -19 && showCatCount <= 2) {
      setShowCatCount((showCatCount) => showCatCount + 1);
      SetCurrentAnimation("Cat licking 1-143_GRT_");
      if (showCatCount >= 2) {
        setShowCat(false);
      } else {
        cat.current.position.z = 0;
      }
    }
  });

  useEffect(() => {
    if (cameraHeight <= -160) {
      setActivateAnimation(true);
    }

    let showingCat = (showCat) => showCat
    // used to reset the cat
    if ((cameraHeight > -140 || cameraHeight < -190) && showingCat === false) {
      setActivateAnimation(false);
      setShowCatCount(1)
      setShowCat(true);
      cat.current.position.z = 0;
    }
  }, [cameraHeight]);

  return (
    <group ref={cat} {...props} dispose={null} visible={showCat}>
      <group name="Scene" scale={8} rotation={[-1.57, 0, Math.PI]}>
        <group name="Object_5">
          <primitive object={nodes["DEF-spine_02"]} />
          <primitive object={nodes["DEF-tail006_0184"]} />
        </group>
        <skinnedMesh
          name="Object_199"
          geometry={nodes.Object_199.geometry}
          material={materials.cat_body}
          skeleton={nodes.Object_199.skeleton}
          rotation={[-Math.PI / 2, 0, -Math.PI]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/cat/cat-transformed.glb");
