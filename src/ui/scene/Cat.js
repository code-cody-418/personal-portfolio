/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 cat.glb --transform 
Files: cat.glb [13.01MB] > C:\code\personal-portfolio\public\cat\cat-transformed.glb [6.71MB] (48%)
*/

import React, { useEffect, useState } from "react";
import { useFrame, useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import * as THREE from "three";

export function Cat(props) {
  const group = React.useRef();
  const { scene, animations } = useGLTF("/cat/cat-transformed.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { actions, mixer } = useAnimations(animations, group);

  const [currentAnimation, SetCurrentAnimation] = useState(
    "Cat licking 1-143_GRT_"
  );
  useEffect(() => {
    if (currentAnimation === "Cat_Walk 1_32_GRT_") {
      actions?.[currentAnimation].reset().fadeIn(0.5).play();
    } else if (currentAnimation === "Cat licking 1-143_GRT_") {
      actions[currentAnimation].clampWhenFinished = true;
      actions?.[currentAnimation]
        .reset()
        .setLoop(THREE.LoopOnce)
        .fadeIn(0.5)
        .play();
    }
  }, [actions, currentAnimation]);

  mixer.addEventListener("finished", () => {
    SetCurrentAnimation("Cat_Walk 1_32_GRT_");
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Object_5" rotation={[-Math.PI / 2, 0, -Math.PI]}>
          <primitive object={nodes["DEF-spine_02"]} />
          <primitive object={nodes["DEF-tail006_0184"]} />
        </group>
        <skinnedMesh
          name="Object_197"
          geometry={nodes.Object_197.geometry}
          material={materials["cat_fur_.001"]}
          skeleton={nodes.Object_197.skeleton}
          rotation={[-Math.PI / 2, 0, -Math.PI]}
        />
        <skinnedMesh
          name="Object_199"
          geometry={nodes.Object_199.geometry}
          material={materials.cat_body}
          skeleton={nodes.Object_199.skeleton}
          rotation={[-Math.PI / 2, 0, -Math.PI]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/cat/cat-transformed.glb");
